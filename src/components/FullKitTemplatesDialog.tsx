import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from './ui/dialog';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Card } from './ui/card';
import { ScrollArea } from './ui/scroll-area';
import { Checkbox } from './ui/checkbox';
import { Plus, Trash2, Save, Copy } from 'lucide-react';
import { ChecklistItem } from '../types/task';

interface ChecklistTemplate {
  id: string;
  name: string;
  description: string;
  items: Omit<ChecklistItem, 'completed'>[];
}

interface FullKitTemplatesDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSelectTemplate?: (template: ChecklistTemplate) => void;
}

export function FullKitTemplatesDialog({
  open,
  onOpenChange,
  onSelectTemplate,
}: FullKitTemplatesDialogProps) {
  const [templates, setTemplates] = useState<ChecklistTemplate[]>([
    {
      id: '1',
      name: '–¢–û–°: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
      description: '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –¢–û–°',
      items: [
        { id: '1-1', title: '‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)' },
        { id: '1-2', title: '‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' },
        { id: '1-3', title: '‚úÖ –î–∞–Ω–∞ 50%-–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –∑–∞–ø–∞—Å–æ–≤)' },
        { id: '1-4', title: '‚úÖ –ì–æ—Ç–æ–≤–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è' },
        { id: '1-5', title: '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞' },
        { id: '1-6', title: '‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
        { id: '1-7', title: '‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' },
        { id: '1-8', title: '‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω —Å—Ç—Ä–∞–∂ –≤–æ—Ä–æ—Ç (gatekeeper)' },
      ],
    },
    {
      id: '2',
      name: '–¢–û–°: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫',
      items: [
        { id: '2-1', title: '‚úÖ –ì–æ—Ç–æ–≤ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' },
        { id: '2-2', title: '‚úÖ –ù–∞–ø–∏—Å–∞–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã' },
        { id: '2-3', title: '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞' },
        { id: '2-4', title: '‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ' },
        { id: '2-5', title: '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' },
        { id: '2-6', title: '‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏' },
      ],
    },
    {
      id: '3',
      name: '–¢–û–°: –†–µ–ª–∏–∑ –≤ production',
      description: '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞',
      items: [
        { id: '3-1', title: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' },
        { id: '3-2', title: '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' },
        { id: '3-3', title: '‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–ª–∏–∑–Ω—ã–π changelog' },
        { id: '3-4', title: '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã' },
        { id: '3-5', title: '‚úÖ –ü–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞ –≥–æ—Ç–æ–≤ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω' },
        { id: '3-6', title: '‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞' },
        { id: '3-7', title: '‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã' },
      ],
    },
    {
      id: '4',
      name: '–¢–û–°: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ (–ë–∞—Ä–∞–±–∞–Ω)',
      description: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–ª—è –∑–∞–¥–∞—á-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
      items: [
        { id: '4-1', title: 'ü•Å –ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (–±–∞—Ä–∞–±–∞–Ω)' },
        { id: '4-2', title: 'ü•Å –í—ã–¥–µ–ª–µ–Ω—ã –ª—É—á—à–∏–µ —Ä–µ—Å—É—Ä—Å—ã' },
        { id: '4-3', title: 'ü•Å –£–±—Ä–∞–Ω—ã –≤—Å–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏' },
        { id: '4-4', title: 'ü•Å –ù–∞—Å—Ç—Ä–æ–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' },
        { id: '4-5', title: 'ü•Å –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ø–ª–∞–Ω —É—Å–∫–æ—Ä–µ–Ω–∏—è' },
        { id: '4-6', title: 'ü•Å –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏' },
      ],
    },
    {
      id: '5',
      name: '–¢–û–°: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞',
      description: '–ë–∞–∑–æ–≤—ã–π –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á',
      items: [
        { id: '5-1', title: 'üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç' },
        { id: '5-2', title: 'üìã –ù–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π' },
        { id: '5-3', title: 'üìã –î–∞–Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (50%)' },
        { id: '5-4', title: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã' },
        { id: '5-5', title: 'üìã –ù–µ—Ç –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π' },
      ],
    },
  ]);

  const [editingTemplate, setEditingTemplate] = useState<ChecklistTemplate | null>(null);
  const [newItemTitle, setNewItemTitle] = useState('');

  const startNewTemplate = () => {
    const newTemplate: ChecklistTemplate = {
      id: Date.now().toString(),
      name: '–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω',
      description: '',
      items: [],
    };
    setEditingTemplate(newTemplate);
  };

  const saveTemplate = () => {
    if (!editingTemplate) return;

    const exists = templates.find(t => t.id === editingTemplate.id);
    if (exists) {
      setTemplates(templates.map(t => (t.id === editingTemplate.id ? editingTemplate : t)));
    } else {
      setTemplates([...templates, editingTemplate]);
    }
    setEditingTemplate(null);
  };

  const deleteTemplate = (id: string) => {
    setTemplates(templates.filter(t => t.id !== id));
  };

  const duplicateTemplate = (template: ChecklistTemplate) => {
    const newTemplate: ChecklistTemplate = {
      ...template,
      id: Date.now().toString(),
      name: `${template.name} (–∫–æ–ø–∏—è)`,
      items: template.items.map(item => ({
        ...item,
        id: `${Date.now()}-${item.id}`,
      })),
    };
    setTemplates([...templates, newTemplate]);
  };

  const addItemToEditingTemplate = () => {
    if (!editingTemplate || !newItemTitle.trim()) return;

    const newItem = {
      id: Date.now().toString(),
      title: newItemTitle,
    };

    setEditingTemplate({
      ...editingTemplate,
      items: [...editingTemplate.items, newItem],
    });
    setNewItemTitle('');
  };

  const removeItemFromEditingTemplate = (itemId: string) => {
    if (!editingTemplate) return;

    setEditingTemplate({
      ...editingTemplate,
      items: editingTemplate.items.filter(item => item.id !== itemId),
    });
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle>–®–∞–±–ª–æ–Ω—ã "–ü–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞"</DialogTitle>
          <DialogDescription>
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –∑–∞–¥–∞—á–∞–º
          </DialogDescription>
        </DialogHeader>

        <div className="flex gap-4 h-[70vh]">
          {/* –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ */}
          <div className="w-1/3 border-r pr-4">
            <div className="mb-4">
              <Button onClick={startNewTemplate} className="w-full">
                <Plus className="h-4 w-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω
              </Button>
            </div>

            <ScrollArea className="h-[calc(100%-60px)]">
              <div className="space-y-2">
                {templates.map((template) => (
                  <Card
                    key={template.id}
                    className={`p-3 cursor-pointer transition-colors ${
                      editingTemplate?.id === template.id
                        ? 'border-blue-500 bg-blue-50'
                        : 'hover:bg-gray-50'
                    }`}
                    onClick={() => setEditingTemplate(template)}
                  >
                    <div className="flex items-start justify-between mb-1">
                      <h4 className="text-sm">{template.name}</h4>
                      <div className="flex gap-1">
                        <Button
                          size="sm"
                          variant="ghost"
                          className="h-6 w-6 p-0"
                          onClick={(e) => {
                            e.stopPropagation();
                            duplicateTemplate(template);
                          }}
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          className="h-6 w-6 p-0"
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteTemplate(template.id);
                          }}
                        >
                          <Trash2 className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                    <p className="text-xs text-gray-600 mb-2">{template.description}</p>
                    <div className="text-xs text-gray-500">{template.items.length} –ø—É–Ω–∫—Ç–æ–≤</div>
                  </Card>
                ))}
              </div>
            </ScrollArea>
          </div>

          {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ */}
          <div className="flex-1">
            {editingTemplate ? (
              <div className="h-full flex flex-col">
                <div className="space-y-4 mb-4">
                  <div>
                    <Label>–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</Label>
                    <Input
                      value={editingTemplate.name}
                      onChange={(e) =>
                        setEditingTemplate({ ...editingTemplate, name: e.target.value })
                      }
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    />
                  </div>
                  <div>
                    <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                    <Input
                      value={editingTemplate.description}
                      onChange={(e) =>
                        setEditingTemplate({ ...editingTemplate, description: e.target.value })
                      }
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    />
                  </div>
                </div>

                <div className="flex-1 overflow-hidden">
                  <Label className="mb-2 block">–ü—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞</Label>
                  <ScrollArea className="h-[calc(100%-100px)] mb-4">
                    <div className="space-y-2 pr-4">
                      {editingTemplate.items.map((item) => (
                        <div
                          key={item.id}
                          className="flex items-center gap-2 p-2 bg-gray-50 rounded"
                        >
                          <Checkbox disabled />
                          <span className="flex-1 text-sm">{item.title}</span>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => removeItemFromEditingTemplate(item.id)}
                          >
                            <Trash2 className="h-3 w-3" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  </ScrollArea>

                  <div className="flex gap-2">
                    <Input
                      value={newItemTitle}
                      onChange={(e) => setNewItemTitle(e.target.value)}
                      placeholder="–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç..."
                      onKeyPress={(e) => e.key === 'Enter' && addItemToEditingTemplate()}
                    />
                    <Button onClick={addItemToEditingTemplate}>
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div className="flex gap-2 mt-4 pt-4 border-t">
                  <Button onClick={saveTemplate} className="flex-1">
                    <Save className="h-4 w-4 mr-2" />
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
                  </Button>
                  {onSelectTemplate && (
                    <Button
                      variant="outline"
                      onClick={() => {
                        onSelectTemplate(editingTemplate);
                        onOpenChange(false);
                      }}
                    >
                      –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ
                    </Button>
                  )}
                  <Button variant="outline" onClick={() => setEditingTemplate(null)}>
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                </div>
              </div>
            ) : (
              <div className="h-full flex items-center justify-center text-gray-500">
                <div className="text-center">
                  <p className="mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                  <p className="text-sm">–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
