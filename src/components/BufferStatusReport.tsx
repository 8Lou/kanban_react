import { Card } from './ui/card';
import { Badge } from './ui/badge';
import { Progress } from './ui/progress';
import { AlertTriangle, Clock, CheckCircle2, TrendingUp } from 'lucide-react';
import { Task } from '../types/task';

interface BufferStatusReportProps {
  tasks: Task[];
}

export function BufferStatusReport({ tasks }: BufferStatusReportProps) {
  // –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É—Ñ–µ—Ä–æ–≤
  const redZoneTasks = tasks.filter(t => t.bufferConsumption > 70);
  const yellowZoneTasks = tasks.filter(t => t.bufferConsumption > 30 && t.bufferConsumption <= 70);
  const greenZoneTasks = tasks.filter(t => t.bufferConsumption <= 30);
  
  // –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ
  const inProgressTasks = tasks.filter(t => t.status === 'inProgress');
  const avgBufferConsumption = inProgressTasks.length > 0 
    ? inProgressTasks.reduce((sum, t) => sum + t.bufferConsumption, 0) / inProgressTasks.length 
    : 0;

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ (–∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ + –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  const criticalTasks = tasks.filter(t => 
    t.bufferConsumption > 70 && 
    (t.priority === 'high' || t.constraintType === 'drum' || t.constraintType === 'constraint')
  );

  const getZoneColor = (zone: 'red' | 'yellow' | 'green') => {
    switch (zone) {
      case 'red': return 'bg-red-50 border-red-200';
      case 'yellow': return 'bg-yellow-50 border-yellow-200';
      case 'green': return 'bg-green-50 border-green-200';
    }
  };

  const getZoneIcon = (zone: 'red' | 'yellow' | 'green') => {
    switch (zone) {
      case 'red': return <AlertTriangle className="h-5 w-5 text-red-600" />;
      case 'yellow': return <Clock className="h-5 w-5 text-yellow-600" />;
      case 'green': return <CheckCircle2 className="h-5 w-5 text-green-600" />;
    }
  };

  return (
    <div className="space-y-4">
      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Card className="p-4">
        <div className="flex items-center gap-3 mb-4">
          <TrendingUp className="h-5 w-5 text-blue-600" />
          <h3 className="font-semibold">–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤</h3>
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-red-600">{redZoneTasks.length}</div>
            <div className="text-xs text-gray-600">–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-yellow-600">{yellowZoneTasks.length}</div>
            <div className="text-xs text-gray-600">–ñ–µ–ª—Ç–∞—è –∑–æ–Ω–∞</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">{greenZoneTasks.length}</div>
            <div className="text-xs text-gray-600">–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">{Math.round(avgBufferConsumption)}%</div>
            <div className="text-xs text-gray-600">–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥</div>
          </div>
        </div>

        <div className="mb-2">
          <div className="flex justify-between text-sm mb-1">
            <span>–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤</span>
            <span>{Math.round(avgBufferConsumption)}%</span>
          </div>
          <Progress value={avgBufferConsumption} showBufferZones />
        </div>
      </Card>

      {/* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ */}
      {criticalTasks.length > 0 && (
        <Card className="p-4 border-red-200 bg-red-50">
          <div className="flex items-center gap-3 mb-3">
            <AlertTriangle className="h-5 w-5 text-red-600" />
            <h3 className="font-semibold text-red-800">
              –¢—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ ({criticalTasks.length})
            </h3>
          </div>
          <div className="space-y-2">
            {criticalTasks.map(task => (
              <div key={task.id} className="flex items-center justify-between p-2 bg-white rounded border">
                <div className="flex-1">
                  <div className="font-medium text-sm">{task.title}</div>
                  <div className="text-xs text-gray-600">
                    {task.assignees.join(', ')} ‚Ä¢ {task.constraintType === 'drum' ? 'ü•Å –ë–∞—Ä–∞–±–∞–Ω' : ''}
                  </div>
                </div>
                <Badge className="bg-red-100 text-red-800 border-red-200">
                  {task.bufferConsumption}%
                </Badge>
              </div>
            ))}
          </div>
        </Card>
      )}

      {/* –ó–∞–¥–∞—á–∏ –ø–æ –∑–æ–Ω–∞–º */}
      <div className="grid md:grid-cols-3 gap-4">
        {/* –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ */}
        <Card className={`p-4 ${getZoneColor('red')}`}>
          <div className="flex items-center gap-2 mb-3">
            {getZoneIcon('red')}
            <h4 className="font-medium text-red-800">–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞</h4>
            <Badge className="bg-red-200 text-red-800">{redZoneTasks.length}</Badge>
          </div>
          <p className="text-xs text-red-700 mb-3">
            –ë—É—Ñ–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.
          </p>
          <div className="space-y-2">
            {redZoneTasks.slice(0, 3).map(task => (
              <div key={task.id} className="text-xs">
                <div className="font-medium">{task.title}</div>
                <div className="text-red-600">{task.bufferConsumption}% –±—É—Ñ–µ—Ä–∞</div>
              </div>
            ))}
            {redZoneTasks.length > 3 && (
              <div className="text-xs text-red-600">
                +{redZoneTasks.length - 3} –∑–∞–¥–∞—á...
              </div>
            )}
          </div>
        </Card>

        {/* –ñ–µ–ª—Ç–∞—è –∑–æ–Ω–∞ */}
        <Card className={`p-4 ${getZoneColor('yellow')}`}>
          <div className="flex items-center gap-2 mb-3">
            {getZoneIcon('yellow')}
            <h4 className="font-medium text-yellow-800">–ñ–µ–ª—Ç–∞—è –∑–æ–Ω–∞</h4>
            <Badge className="bg-yellow-200 text-yellow-800">{yellowZoneTasks.length}</Badge>
          </div>
          <p className="text-xs text-yellow-700 mb-3">
            –ë—É—Ñ–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å—Ç–æ—â–∞—Ç—å—Å—è. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
          </p>
          <div className="space-y-2">
            {yellowZoneTasks.slice(0, 3).map(task => (
              <div key={task.id} className="text-xs">
                <div className="font-medium">{task.title}</div>
                <div className="text-yellow-600">{task.bufferConsumption}% –±—É—Ñ–µ—Ä–∞</div>
              </div>
            ))}
            {yellowZoneTasks.length > 3 && (
              <div className="text-xs text-yellow-600">
                +{yellowZoneTasks.length - 3} –∑–∞–¥–∞—á...
              </div>
            )}
          </div>
        </Card>

        {/* –ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ */}
        <Card className={`p-4 ${getZoneColor('green')}`}>
          <div className="flex items-center gap-2 mb-3">
            {getZoneIcon('green')}
            <h4 className="font-medium text-green-800">–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞</h4>
            <Badge className="bg-green-200 text-green-800">{greenZoneTasks.length}</Badge>
          </div>
          <p className="text-xs text-green-700 mb-3">
            –ë—É—Ñ–µ—Ä –≤ –Ω–æ—Ä–º–µ. –î–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.
          </p>
          <div className="text-sm text-green-600">
            ‚úÖ {greenZoneTasks.length} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Å—Ä–æ–∫
          </div>
        </Card>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <Card className="p-4 bg-blue-50 border-blue-200">
        <h4 className="font-medium text-blue-800 mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±—É—Ñ–µ—Ä–∞–º–∏</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          {redZoneTasks.length > 0 && (
            <li>‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –∑–∞–¥–∞—á–∏ –≤ –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω–µ</li>
          )}
          {yellowZoneTasks.length > 0 && (
            <li>‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∂–µ–ª—Ç–æ–π –∑–æ–Ω—ã</li>
          )}
          {avgBufferConsumption > 60 && (
            <li>‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –æ—Ü–µ–Ω–æ–∫</li>
          )}
          {criticalTasks.length > 0 && (
            <li>‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö (–±–∞—Ä–∞–±–∞–Ω/constraint)</li>
          )}
          <li>‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É—Ñ–µ—Ä–æ–≤</li>
        </ul>
      </Card>
    </div>
  );
}